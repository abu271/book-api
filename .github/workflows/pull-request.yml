name: Pull Request Checks

on:
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    # install python dependencies
    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: 3.13
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    # upload artifacts
    - name: Upload math result for job 1
      uses: actions/upload-artifact@v4
      with:
        name: bookapi-artifact
        path: |
            app/
            Dockerfile
            docker-compose.yml
            requirements.txt
            version.txt
        retention-days: 1
  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Ensure the full commit history is fetched
        ref: ${{ github.event.pull_request.head.ref }}
    # install python dependencies
    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: 3.13
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    # format code with autopep8
    - name: autopep8
      uses: peter-evans/autopep8@v1
      with:
        args: --recursive --in-place --aggressive --aggressive .
    # create a pull request if autopep8 made changes
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v3
      with:
        commit-message: "lint: autopep8 action fixes"
        title: Fixes by autopep8 action
        body: This is an auto-generated PR with fixes by autopep8.
        labels: autopep8, automated pr
        reviewers: abu271
        branch: autopep8-patches
    - name: Fail if autopep8 made changes
        if: steps.lint.outputs.exit-code == 2
        run: exit 1
    # lint code with flake8
    - name: Lint with flake8
      run: cd app && flake8

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    # create docker postgres container for testing
    services:
      postgres: 
        image: postgres:13-alpine
        env:
          POSTGRES_DB: github-workflow
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: superpassword
        ports: 
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      # download artifacts
      - name: Download artifact from Build
        uses: actions/download-artifact@v4
        with:
          name: bookapi-artifact
      # install python dependencies
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: 3.13
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools
          pip install -r requirements.txt
      # run python tests
      - name: Run test
        run: cd app && python manage.py test
        env:
          SYSTEM_ENV: GITHUB_WORKFLOW
